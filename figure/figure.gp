set term cairolatex pdf standalone size 100cm, 100cm dl 0.5 \
  font '\sfdefault,10' \
  header '\usepackage{sfmath,xcolor}\
          \usepackage[scaled=1]{helvet}\
          \renewcommand{\familydefault}{\sfdefault}'
# or replace the last 2 lines by the following one to use computer modern fonts
# \usepackage{cmbright}'

texfile = system(sprintf("echo %s | sed 's/\\.gp/\\.tex/'", ARG0))
pdffile = system(sprintf("echo %s | sed 's/\\.gp/\\.pdf/'", ARG0))

set output '_tmp.tex'
set multiplot

# your plot goes HERE
# (you have a HUGE canvas to play with)

set lmargin at screen 0.11
set rmargin at screen 0.2
set tmargin at screen 0.9
set bmargin at screen 0.85
set xrange [-pi:pi] 
set yrange [-1.1:1.1] 
set border 1+2
set tics nomirror
set xtics ('$-\pi$' -pi, '$0$' 0, '$+\pi$' pi)
set ytics -0.8, 0.4
set xlabel "time"
set ylabel "something"

plot sin(x) with line lw 3 lc rgb 'black'

# some fake scatter plot

set lmargin at screen 0.22
set rmargin at screen 0.27
set autoscale
set border 1+2
set tics nomirror
set xtics auto
set ytics auto
set xlabel "something"
set ylabel "something else" offset -1, 0
fit a*x+b 'fake_data1' using 1:2 via a,b
plot 'fake_data1' u 1:2 w p pt 7 ps 1 lc rgb '#cc000000', \
  a*x+b with line lw 3 lc 7 dt 2
   

# some fake scatter plot in another way

set lmargin at screen 0.11
set rmargin at screen 0.16
set tmargin at screen 0.83
set bmargin at screen 0.78
set autoscale
set border 1+2
set tics nomirror
set xtics auto
set ytics auto
set xlabel "something"
set ylabel "something else" offset -1, 0
f(x) = x**3
load 'parula.pal'
set cbrange [0:8]
set cbtics 0,4
set colorbox user origin graph 1.1, graph 0 size graph 0.05, graph 0.3
set cblabel "color" offset 1,0 rotate by 270
plot 'fake_data1' u (f($1)):($2/3.0):(abs($2)) w p pt 7 ps 1 lc palette 

# heatmaps
set lmargin at screen 0.19
set rmargin at screen 0.27
unset border
unset tics
set cbrange [0:*]
unset colorbox
set xlabel 'blablr'
plot 'sequential-mat' mat w image



# yerrobars
# 3D plots

# ocaml interface
# gifs


unset multiplot
unset output

# pdflatex on the other .tex file which will include the .tex 
# generated by gnuplot running on this script
system("pdflatex _tmp.tex")
system(sprintf("pdflatex %s",texfile))
system(sprintf("pdfcrop %s %s",pdffile,pdffile))
system("rm -f ./_tmp*")
system("rm -f ./*.aux ./*.log")
  
